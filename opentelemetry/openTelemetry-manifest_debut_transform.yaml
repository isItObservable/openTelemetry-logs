apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: oteld
  labels:
    app: opentelemetry
spec:
  mode: daemonset
  serviceAccount: otelcontribcol
  image: otel/opentelemetry-collector-contrib:0.88.0
  ports:
    - name: prometheus
      port: 9090
      targetPort: 9090
  env:
    - name: DT_ENDPOINT
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: dynatrace_oltp_url
    - name: DT_API_TOKEN
      valueFrom:
        secretKeyRef:
          name: dynatrace
          key: dt_api_token
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
  volumeMounts:
    - mountPath: /var/log
      name: varlog
      readOnly: true
    - mountPath: /var/lib/docker/containers
      name: varlibdockercontainers
      readOnly: true
  volumes:
    - name: varlog
      hostPath:
        path: /var/log
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers


  config: |
    receivers:
    
      prometheus:
        config:
          scrape_configs:
          - job_name: 'kuma-dataplanes'
            scrape_interval: "5s"
            kuma_sd_configs:
            - server: "http://kuma-control-plane.kuma-system.svc.cluster.local:5676"  
            relabel_configs:
            - source_labels:
              - __meta_kuma_mesh
              regex: "(.*)"
              target_label: mesh
            - source_labels:
              - __meta_kuma_dataplane
              regex: "(.*)"
              target_label: dataplane
            - source_labels:
              - __meta_kuma_service
              regex: "(.*)"
              target_label: service
            - action: labelmap
              regex: __meta_kuma_label_(.+)
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
            - targets:
              - $MY_POD_IP:8888
    
      opencensus:
        endpoint: $MY_POD_IP:55678
    
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
        - type: router
          id: get-format
          routes:
          - output: set-docker
            expr: 'body matches "^\\{"'
          - output: set-crio
            expr: 'body matches "^[^ Z]+ "'
          - output: set-containerd
            expr: 'body matches "^[^ Z]+Z"'
        - type: add
          id: set-docker
          field: resource["container.runtime"]
          value: "docker"
        - type: add
          id: set-crio
          field: resource["container.runtime"]
          value: "crio"
        - type: add
          id: set-containerd
          field: resource["container.runtime"]
          value: "containerd"
      otlp:
        protocols:
          grpc:
            endpoint: $MY_POD_IP:4317
          http:
            endpoint: $MY_POD_IP:4318


    processors:
      batch:
        send_batch_max_size: 1000
        timeout: 30s
        send_batch_size : 800
    
      cumulativetodelta:
    
      filter:
        error_mode: ignore
        metrics:
          metric:
            - 'type == METRIC_DATA_TYPE_HISTOGRAM'
            - 'IsMatch(name, "kafka.consumer.*")'
    
      transform:
        log_statements:
          context: log
          statements:
            - merge_maps(cache,ExtractPatterns(attributes["log.file.path"],"^.*/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\\-]{36})/(?P<container_name>[^\\._]+)/(?P<restart_count>\\d+)\\.log$"), "upsert") where attributes["log.file.path"] != nil
            - set(resource.attributes["k8s.namespace"],cache["namespace"]) where cache["namespace"]!= nil
            - set(resource.attributes["k8s.pod.name"],cache["pod_name"]) where cache["pod_name"]!= nil
            - set(resource.attributes["k8s.pod.id"],cache["uid"]) where cache["uid"]!= nil
      transform/http:
        log_statements:
          context: log
          statements:
            - merge_maps(cache,ExtractPatterns(body,"^.+Z\\]\\s+(?P<meshname>\\w+)\\s+\\\"(?P<url>[^\\\"]+)\\\"\\s+(?P<responsecode>\\d+)\\s+(?P<response_flag>[a-f0-9A-Z\\-]{1,2})\\s+.*$"), "upsert") where attributes["log_name"] == "MeshAccessLog" and not IsMatch(body,".*took.*")
            - set(resource.attributes["kuma.meshname"],cache["meshname"]) where cache["meshname"]!= nil
            - set(attributes["http.response.code"],cache["responsecode"]) where cache["responsecode"]!= nil
            - set(attributes["http.response.flags"],cache["response_flag"]) where cache["response_flag"]!= nil
      transform/docker:
        log_statements:
          context: log
          statements:
            - merge_maps(cache,ParseJSON(body), "upsert") where body!= nil
            - set(body,cache["log"]) where cache["log"] != nil
    
      transform/crio:
        log_statements:
          context: log
          statements:
            - merge_maps(cache,ExtractPatterns(body,"^(?P<time>[^Z]+)Z (?P<stream>stdout|stderr) (?P<logtag>[^\\s]*) ?(?P<log>.*)$"), "upsert") where body != nil
            - set(body,cache["log"]) where cache["log"] != nil      
      transform/containerd:
        log_statements:
          context: log
          statements:
            - merge_maps(cache,ExtractPatterns(body,"^(?P<time>[^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^\\s]*) ?(?P<log>.*)$"), "upsert") where body != nil
            - merge_maps(cache,ExtractPatterns(body,"^(?P<time>\\d+/\\d+/\\d+\\s+\\d+:\\d+\\d+) (?P<log>.*)$"), "upsert") where attributes["log_name"]!= "MeshAccessLog" and cache["log"]!= nil and not IsMap(cache["log"])
            - set(body,cache["log"]) where cache["log"] != nil
            - merge_maps(cache,ParseJSON(body), "upsert") where IsMap(body)
            - set(body,cache["message"]) where cache["message"] != nil
            - set(body,cache["msg"]) where cache["msg"] != nil
            - set(severity_text,cache["level"]) where cache["level"] != nil
            - set(severity_text,cache["severity"]) where cache["severity"] != nil
            - set(severity_number,SEVERITY_NUMBER_INFO) where cache["level"] == "INFO"
            - set(severity_number,SEVERITY_NUMBER_INFO) where cache["severity"] == "info"
            - set(attributes["loggerName"],cache["loggerName"]) where cache["loggerName"] != nil
      transform/metrics:
        metric_statements:
          context: metric
          statements:
            - replace_pattern(unit, "_", "") where IsMatch(unit,".*[_]{1}.*")
            - replace_pattern(name,"^(.*)$","longer.name.$$1") where Len(name) <= 4
            - set(resource.attributes["cumulative"],"true") where aggregation_temporality == AGGREGATION_TEMPORALITY_CUMULATIVE
    
    
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
          # Pod labels which can be fetched via K8sattributeprocessor
          labels:
            - tag_name: key1
              key: label1
              from: pod
            - tag_name: key2
              key: label2
              from: pod
        # Pod association using resource attributes and connection
        pod_association:
          - sources:
             - from: resource_attribute
               name: k8s.pod.uid
             - from: resource_attribute
               name: k8s.pod.name
          - sources:
             - from: connection
      memory_limiter:
        check_interval: 1s
        limit_percentage: 70
        spike_limit_percentage: 30

    exporters:
      logging:
        verbosity: detailed
      otlphttp:
        endpoint: $DT_ENDPOINT/api/v2/otlp
        headers:
          Authorization: "Api-Token $DT_API_TOKEN"

    connectors:
      routing:
        default_pipelines: [logs/default]
        error_mode: ignore
        table:
          - statement: route() where attributes["container.runtime"] =="docker"
            pipelines: [logs/docker]
          - statement: route() where attributes["container.runtime"] =="crio"
            pipelines: [logs/crio]
          - statement: route() where attributes["container.runtime"] =="containerd"
            pipelines: [logs/containerd]
      routing/metrics:
        default_pipelines: [metrics/default]
        error_mode: ignore
        table:
          - statement: route() where attributes["cumulative"]=="true"
            pipelines: [metrics/conversion]
    
    
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter,k8sattributes,batch]
          exporters: [otlphttp]
        metrics:
          receivers: [otlp,prometheus]
          processors: [memory_limiter,filter, transform/metrics]
          exporters: [routing/metrics]
        metrics/conversion:
         receivers: [routing/metrics]
         processors: [cumulativetodelta,batch]
         exporters: [otlphttp]
        metrics/default:
          receivers: [routing/metrics]
          processors: [batch]
          exporters: [otlphttp]
        logs/otel:
          receivers: [otlp]
          processors: [memory_limiter,transform/http,k8sattributes,batch]
          exporters: [routing]
        logs:
          receivers: [filelog]
          exporters: [routing]
        logs/docker:
          receivers: [routing]
          processors: [transform/docker, transform,k8sattributes,batch]
          exporters: [otlphttp]
        logs/crio:
          receivers: [routing]
          processors: [transform/crio, transform,k8sattributes,batch]
          exporters: [otlphttp]
        logs/containerd:
          receivers: [routing]
          processors: [transform/containerd, transform,k8sattributes,batch]
          exporters: [otlphttp]
        logs/default:
          receivers: [routing]
          processors: [k8sattributes,batch]
          exporters: [otlphttp]
      telemetry:
        metrics:
          address: $MY_POD_IP:8888
---